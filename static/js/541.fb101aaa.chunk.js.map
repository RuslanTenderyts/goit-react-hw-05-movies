{"version":3,"file":"static/js/541.fb101aaa.chunk.js","mappings":"gOAmCA,UA/Ba,WACT,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAcR,OAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAAyBF,GAAzB,iGAE2BG,EAAAA,EAAAA,IAAmBH,GAF9C,OAEcI,EAFd,OAGQL,EAAWK,EAAKC,MAHxB,gDAKQC,QAAQC,IAAR,MALR,yDADY,yBAAC,SAAD,2BASZC,CAASR,EACZ,GAAE,CAACA,KAGA,0BACI,wBACCF,EAAOW,KAAI,gBAAET,EAAF,EAAEA,GAAIU,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,aAAvB,OACR,2BACI,gBAAKC,IAAG,wCAAmCD,GAAgBE,IAAKJ,KAChE,8BAAOA,EAAP,QACA,uCAAeC,OAHVX,EADD,OAUvB,C,mMC/BDe,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAoB,mCAAG,WAAQC,GAAR,4FAAqBC,EAArB,+BAA4B,EAA5B,SAEXJ,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEE,EAAlE,iBAAsFC,EAAtF,yBAFW,WAE5BC,EAF4B,QAGrBhB,KAAKiB,cAHgB,yCAIzBC,QAAQC,OAAQ,IAAIC,MAAJ,6DAAyBN,EAAzB,iHAJS,gCAM3BE,EAAShB,MANkB,2CAAH,sDASpBqB,EAAmB,mCAAG,oGACRV,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,WACzBI,EADyB,QAElBhB,KAAKiB,cAFa,yCAGrBC,QAAQC,OAAQ,IAAIC,MAAJ,qFAHK,gCAKxBJ,EAAShB,MALe,2CAAH,qDAQnBsB,EAAkB,mCAAG,WAAQ1B,GAAR,uFAETe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,oBAAiCgB,EAAjC,oBAFS,UAE1BI,EAF0B,gDAIvBE,QAAQC,OAAQ,IAAIC,MAAJ,6DAAyBxB,EAAzB,sGAJO,cAMhCM,QAAQC,IAAIa,GANoB,kBAOzBA,GAPyB,2CAAH,sDAUlBjB,EAAkB,mCAAG,WAAQH,GAAR,uFAETe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,4BAAyCgB,EAAzC,oBAFS,UAE1BI,EAF0B,gDAIvBE,QAAQC,OAAQ,IAAIC,MAAJ,6DAAyBxB,EAAzB,sGAJO,gCAOzBoB,EAAShB,MAPgB,2CAAH,sDAUlBuB,EAAkB,mCAAG,WAAQ3B,GAAR,uFAETe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,4BAAyCgB,EAAzC,2BAFS,WAE1BI,EAF0B,QAGnBhB,KAAKwB,YAHc,yCAIvBN,QAAQC,OAAQ,IAAIC,MAAJ,6DAAyBxB,EAAzB,sGAJO,gCAMzBoB,EAAShB,MANgB,2CAAH,qD","sources":["components/Cast/Cast.js","service/api.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { fetchMoviesCredits } from \"service/api\";\n\nconst Cast = () => {\n    const [actors, setActors] = useState([]);\n    const { id } = useParams();\n   \n    useEffect(() => { \n        async function getFetch (id) {\n            try {\n                const data = await fetchMoviesCredits(id);\n                setActors( data.cast );           \n            } catch (error) {\n                console.log(error)\n            } \n        };\n        getFetch(id);\n    }, [id]);\n         \n    return (\n        <div>\n            <ul>\n            {actors.map(({id, name, character, profile_path }) => (\n                <li key={id}>\n                    <img src={`http://image.tmdb.org/t/p/w185${profile_path}`} alt={name}/>\n                    <h3> { name } </h3>\n                    <p>Character: {character}</p>\n                </li>\n            ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Cast;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst KEY_API = \"70dafc4dedeb92246e41153ac2fb24f3\";\n\nexport const fetchMoviesWithQuery = async ( searchQuery, page = 1 ) => {\n  \n  const response = await axios.get(`search/movie?api_key=${KEY_API}&language=en-US&query=${searchQuery}&page=${page}&include_adult=false`);\n  if(!response.data.total_results) {\n    return Promise.reject( new Error( `По запиту \"${searchQuery}\" фільмів не знайдено` ));\n  };\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/week?api_key=${KEY_API}`);\n    if(!response.data.total_results) {\n       return Promise.reject( new Error( `Помилка пошуку` ));\n    };\n    return response.data;\n  };\n  \nexport const fetchMoviesDetails = async ( id ) => {\n\n  const response = await axios.get(`movie/${id}?api_key=${KEY_API}&language=en-US`);\n  if(!response) {\n    return Promise.reject( new Error( `По запиту \"${id}\" фільмa не знайдено` ));\n  };\n  console.log(response)\n  return response;\n};\n\nexport const fetchMoviesCredits = async ( id ) => {\n\n  const response = await axios.get(`movie/${id}/credits?api_key=${KEY_API}&language=en-US`);\n  if(!response) {\n    return Promise.reject( new Error( `По запиту \"${id}\" фільмa не знайдено` ));\n  };\n  \n  return response.data;\n};\n\nexport const fetchMoviesReviews = async ( id ) => {\n\n  const response = await axios.get(`movie/${id}/reviews?api_key=${KEY_API}&language=en-US&page=1`);\n  if(!response.data.total_pages) {\n    return Promise.reject( new Error( `По запиту \"${id}\" фільмa не знайдено` ));\n  };\n  return response.data;\n};"],"names":["useState","actors","setActors","id","useParams","useEffect","fetchMoviesCredits","data","cast","console","log","getFetch","map","name","character","profile_path","src","alt","axios","KEY_API","fetchMoviesWithQuery","searchQuery","page","response","total_results","Promise","reject","Error","fetchTrendingMovies","fetchMoviesDetails","fetchMoviesReviews","total_pages"],"sourceRoot":""}